                mov r8, #0x500                  ;registar r8 na pocetnu adresu
                mov r2, #0x1000                 ;pocetak rezultatnog bloka
                mov sp, #0x10000                ;inicijalizacija stoga

                ldr r6, maska1                  ;u r6 maska za kraj programa
                ldr r7, maska2                  ;u r7 maska za kraj rezultatnog bloka

petlja1         ldr r3, [r8], #4                ;u r3 spremi za operaciju i pomak za 4
                cmp r3, r6                      ;usporedivanje jesmo li na kraju
                beq kraj                        ;ako jesmo izbaci iz petlje
                ldr r4, [r8], #4                ;u r4 spremi 1. operand i pomak za 4
                ldr r5, [r8], #4                ;u r5 spremi 2. operand i pomak za 4

                cmp r3, #0                      ;provjera jel operacija zbrajanje
                beq zbr                         ;idi na zbrajanje
                cmp r3, #1                      ;provjera jel operacija oduzimanje
                beq odu                         ;idi na oduzimanje
                cmp r3, #2                      ;provjera jeli mnozenje
                beq mno                         ;idi na mnozenje
                cmp r3, #3                      ;provjera je li operacija dijeljenje
                bleq DIJELI                     ;idi na potprogram DIJELI
                str r0, [r2], #4                ;storeaj rezultat diljejnja u r2
                b petlja1                       ;ako je nekim slucajem operacija izvan [0,3]

zbr             add r4, r4, r5                  ;zbrajanje
                str r4, [r2], #4                ;storeanje rezultata zbrajanja u novi blok i povecanje za 4
                b petlja1                       ;vracanje na pocetnu petlju

odu             sub r4, r4, r5                  ;zbrajanje
                str r4, [r2], #4                ;storeanje rezultata oduzimanja u novi blok i povecanje za 4
                b petlja1                       ;vracanje na pocetnu petlju

mno             mul r1, r4, r5                  ;mnozenje
                str r1, [r2], #4                ;storeanje rezultata mnozenja u novi blok i povecanje za 4
                b petlja1                       ;vracanje na pocetnu petlju

DIJELI          stmfd sp!,{r4, r5, r9, r10, r11};spremanje operanada i nekog konteksta
                cmp r5, #0                      ;je li djelitelj nula
                beq preskok                     ;ako je preskoci cijelo dijeljenje
                mov r9, #0                      ;brojac negativnih brojeva stavi na 0 - po njemu gledamo trebamo li raditi rezultat komplementa  
                mov r0, #0                      ;rezultat stavi na 0 za sljedece moguce dijeljenje
                mov r10, r4                     ;kopija r4 kako bi r4 ostao originalan
                mov r11, r5                     ;kopija r5 kako bi r5 ostao originalan  
                ands r10, r10, #0x80000000      ;provjera je li r4 odnosno r10 negativan(ako je 31bit 1)
                eorne r4, r4, r7                ;ako je 31bit 1(broj negativan) napravi 1komplement
                addne r4, r4, #1                ;dodaj 1 na 1k da se dobi 2k
                addne r9, r9, #1                ;ako je broj negativan uvecaj brojac takvih operanada
                ands r11, r11, #0x80000000      ;provjera je li r5 odnosno r11 negativan(ako je 31bit 1)
                eorne r5, r5, r7                ;ako je 31bit 1(broj negativan) napravi 1komplement
                addne r5, r5, #1                ;dodaj 1 na 1k da se dobi 2k
                addne r9, r9, #1                ;ako je broj negativan uvecaj brojac takvih operanada
                b uzastop                       ;prebacivanje na uzastopno oduzimanje
nastavak        cmp r9, #0                      ;ako su oba pozitivna preskoci komplementiranje rezultata
                beq preskok                     ;preskakanje komplementiranja rezultata
                cmp r9, #2                      ;ako su oba negativan preskoci komplementiranje rezultat
                beq preskok                     ;preskakanje komplementiranja rezultata
                eor r0, r0, r7                  ;1komplement rjesenja ako su operandi suprotnog predznaka
                add r0, r0, #1                  ;1k uvecaj za 1 da se dobi 2k = pravi rezultat
preskok         ldmfd sp!, {r4,r5,r9,r10,r11}   ;makni sve sa stoga
                mov pc, lr                      ;vracanje na pocetnu petlju

uzastop         cmp r4, r5                      ;usporedba jel djeljenik i dalje veci
                blo nastavak                    ;ako je dljeljenik manji vracaj se
                sub r4, r4, r5                  ;oduzimaj od djeljenika djelitelj
                add r0, r0, #1                  ;uvecanje brojaca
                b uzastop                       ;ponavljanje petlje


kraj            str r7, [r2]                    ;kraj rezultatnog bloka
                swi 123456                      ;prekid programa



maska1          dw 0x80808080
maska2          dw 0xffffffff
                org 0x500
                dw 0x3, 0xfffffeff, 0x10, 0x1, 0x1f4, 0xfffffd44, 0x2, 0xfffffffe, 0xA, 0x3, 0xfffff000, 0xffffffc0, 0x80808080
                org 0x1000                      ;org i dw iznad je primjer iz vjezbe
                dw 0x0, 0x0, 0x0, 0x0, 0x0      ;provjera rezultata iz vjezbe da se vide u MemViewu, inace sve u Memory Dumpu